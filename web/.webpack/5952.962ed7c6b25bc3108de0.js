(()=>{"use strict";var S={23503:(t,r,e)=>{e.d(r,{ZP:()=>d});const i=new Map,n=()=>{};class s{static default=new s("");#e;constructor(l){this.#e=l,this.setLevel("debug"),i.set(l,this)}name(){return this.#e}isLevelOn(l){switch(l){case"debug":return this.debug!==n;case"info":return this.info!==n;case"warn":return this.warn!==n;case"error":return this.error!==n}return!1}getLevel(){return this.debug!==n?"debug":this.info!==n?"info":this.warn!==n?"warn":"error"}setLevel(l){switch(this.debug=n,this.info=n,this.warn=n,this.error=n,l){case"debug":this.debug=console.debug.bind(e.g.console),this.info=console.info.bind(e.g.console),this.warn=console.warn.bind(e.g.console),this.error=console.error.bind(e.g.console);break;case"info":this.info=console.info.bind(e.g.console),this.warn=console.warn.bind(e.g.console),this.error=console.error.bind(e.g.console);break;case"warn":this.warn=console.warn.bind(e.g.console),this.error=console.error.bind(e.g.console);break;case"error":this.error=console.error.bind(e.g.console);break}}debug(...l){}info(...l){}warn(...l){}error(...l){}getLogger(l){const p=l.replace(/^.+\.(asar|webpack)[\\/\\]/,"").replace(/^(\.\.\/)+/,""),u=this.#e.length>0?`${this.#e}.${p}`:p,c=i.get(u);if(c)return c;const a=new s(u);return i.set(u,a),a}channels(){return Array.from(i.values())}}function f(h){switch(h){case"debug":return"debug";case"info":return"info";case"warn":return"warn";case"error":return"error";default:return"warn"}}const d=s.default},10742:(t,r,e)=>{e.d(r,{Hu:()=>d});var i=e(96389);function n(h){return R.pipe(R.map(l=>l.x.length),R.sum)(h)}function*s(h){let l=0;for(const p of h){if(p==null){l++;continue}const{x:u,y:c,label:a}=p;yield{index:l,x:u,y:c,label:a},l++}}function*f(h){const l={index:0,label:void 0};let p=0;for(const u of h){const c=R.head(R.values(u));if(c!=null)for(let a=0;a<c.length;a++){for(const g of R.keys(u))l[g]=u[g]?.[a];l.index=p,p++,yield l}}}function d(h,l){let p=l;for(let u=0;u<h.length;u++){const c=h[u];if(c==null)continue;const{x:{length:a}}=c;if(p===a&&u===h.length-1)return[u,p];if(p>=a){p-=a;continue}return[u,p]}}},8839:(t,r,e)=>{var i;const n="$$RESPONSE",s="$$ERROR";function f(){const u={onmessage:void 0,postMessage(a,g){const E=new MessageEvent("message",{data:a});c.onmessage&&c.onmessage(E)},terminate:()=>{}},c={onmessage:void 0,postMessage(a,g){const E=new MessageEvent("message",{data:a});u.onmessage&&u.onmessage(E)},terminate:()=>{}};return{local:u,remote:c}}class d{static transferables="$$TRANSFERABLES";#e;#r=0;#t={};#n=new Map;constructor(c){if(this.#e=c,this.#e.onmessage)throw new Error("channel.onmessage is already set. Can only use one Rpc instance per channel.");this.#e.onmessage=this.#s}#s=c=>{const{id:a,topic:g,data:E}=c.data;if(g===n){this.#t[a]?.(c.data),delete this.#t[a];return}new Promise(b=>{const w=this.#n.get(g);if(!w)throw new Error(`no receiver registered for ${g}`);b(w(E))}).then(b=>{if(!b){this.#e.postMessage({topic:n,id:a});return}const w=b[i.transferables];delete b[i.transferables];const m={topic:n,id:a,data:b};this.#e.postMessage(m,w)}).catch(b=>{const w={topic:n,id:a,data:{[s]:!0,name:b.name,message:b.message,stack:b.stack}};this.#e.postMessage(w)})};terminate(){for(const[c,a]of Object.entries(this.#t))a({topic:n,id:c,data:{[s]:!0,name:"Error",message:"Rpc terminated",stack:new Error().stack}})}async send(c,a,g){const E=this.#r++,b={topic:c,id:E,data:a},w=new Promise((m,k)=>{this.#t[E]=A=>{if(A.data?.[s]!=null){const C=new Error(A.data.message);C.name=A.data.name,C.stack=A.data.stack,k(C)}else m(A.data)}});return this.#e.postMessage(b,g),await w}receive(c,a){if(this.#n.has(c))throw new Error(`Receiver already registered for topic: ${c}`);this.#n.set(c,a)}}i=d;const h=d;var l=e(77498),p=e(16750);(0,l.KC)()&&new p.Z(new h(e.g))},2661:(t,r,e)=>{e.d(r,{e:()=>n});const i=e.g;function n(f){i.foxgloveStudioReportErrorFn?.(f)}function s(f){i.foxgloveStudioReportErrorFn=f}},53542:(t,r,e)=>{e.d(r,{g:()=>i});class i extends Error{details;extraInfo;message;constructor(s,f){if(super(),this.details=s,this.extraInfo=f,this.name="AppError",this.message="",s instanceof Error?this.message=s.stack??s.message:typeof s=="string"&&(this.message=s),f!=null)if(f.componentStack!=null)this.message+=`

${f.componentStack}`;else try{const d=JSON.stringify(f);this.message+=`

${d}`}catch{this.message+=`

[ Either cyclic object or object with BigInt(s) ]`}this.message===""&&(this.message="Unknown Error")}}},23571:(t,r,e)=>{e.d(r,{Y:()=>i});function i(n){return n}},64578:(t,r,e)=>{e.d(r,{Z:()=>i});function i(){const n=e.g.fetch;e.g.fetch=async(s,f)=>{const d=new TypeError(`Failed to fetch: ${s}`);return await n(s,f).catch(h=>{throw h.message==="Failed to fetch"?d:h})}}},42146:(t,r,e)=>{e.d(r,{tm:()=>h});var i=e(2661),n=e(53542),s=e(77498);const f=(u,c,a,g)=>{if((0,s.KC)()){(g==="error"?console.error:g==="warn"?console.warn:console.info)("Web Worker has uninitialized sendNotification function; this means this error message cannot show up in the UI (so we show it here in the console instead).",u,c,a);return}console.error("Notification before error display is mounted",u,c,a)};let d=f;function h(u){if(d!==f)throw new Error("Tried to overwrite existing NotificationHandler");d=u}function l(){if(d===f)throw new Error("Tried to unset NotificationHandler but it was already the default");d=f}function p(u,c,a,g){a==="app"&&(g==="warn"||g==="error")&&(0,i.e)(new n.g(c,u)),d(u,c,a,g)}p.expectCalledDuringTest=()=>{throw new Error("Should be overriden in setupTestFramework.ts")}},77075:(t,r,e)=>{e.d(r,{R:()=>i});const i={MONOSPACE:"'IBM Plex Mono'",SANS_SERIF:"'Inter'",SANS_SERIF_FEATURE_SETTINGS:"'cv08', 'cv10', 'tnum'",SANS_SERIF_FEATURE_SETTINGS_CJK:"'tnum'"}},77498:(t,r,e)=>{e.d(r,{KC:()=>i});const i=()=>typeof e.g.postMessage<"u"&&typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope,n=()=>typeof SharedWorkerGlobalScope<"u"&&self instanceof SharedWorkerGlobalScope,s=f=>{const d=typeof fetch<"u"&&fetch("data:test").then(()=>!0).catch(()=>!1);return async(...h)=>{if(await d)throw new Error("Content security policy too loose.");return f(...h)}}},27788:t=>{t.exports="data:font/woff2;base64,"}},M={};function o(t){var r=M[t];if(r!==void 0)return r.exports;var e=M[t]={exports:{}};return S[t](e,e.exports,o),e.exports}o.m=S,o.x=()=>{var t=o.O(void 0,[7955,6160,6941,6750],()=>o(8839));return t=o.O(t),t},(()=>{var t=[];o.O=(r,e,i,n)=>{if(e){n=n||0;for(var s=t.length;s>0&&t[s-1][2]>n;s--)t[s]=t[s-1];t[s]=[e,i,n];return}for(var f=1/0,s=0;s<t.length;s++){for(var[e,i,n]=t[s],d=!0,h=0;h<e.length;h++)(n&!1||f>=n)&&Object.keys(o.O).every(g=>o.O[g](e[h]))?e.splice(h--,1):(d=!1,n<f&&(f=n));if(d){t.splice(s--,1);var l=i();l!==void 0&&(r=l)}}return r}})(),o.d=(t,r)=>{for(var e in r)o.o(r,e)&&!o.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:r[e]})},o.f={},o.e=t=>Promise.all(Object.keys(o.f).reduce((r,e)=>(o.f[e](t,r),r),[])),o.u=t=>""+t+"."+{6160:"8907127b68e978fab841",6750:"0eb1c983b63ffd81860d",6941:"c1d41062f73cd4f42223",7955:"e48e6f0665bc0be793e7"}[t]+".js",o.g=function(){if(typeof globalThis=="object")return globalThis;try{return this||new Function("return this")()}catch{if(typeof window=="object")return window}}(),o.o=(t,r)=>Object.prototype.hasOwnProperty.call(t,r),(()=>{var t;o.g.importScripts&&(t=o.g.location+"");var r=o.g.document;if(!t&&r&&(r.currentScript&&(t=r.currentScript.src),!t)){var e=r.getElementsByTagName("script");if(e.length)for(var i=e.length-1;i>-1&&!t;)t=e[i--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=t})(),(()=>{var t={5952:1},r=n=>{var[s,f,d]=n;for(var h in f)o.o(f,h)&&(o.m[h]=f[h]);for(d&&d(o);s.length;)t[s.pop()]=1;i(n)};o.f.i=(n,s)=>{t[n]||importScripts(o.p+o.u(n))};var e=self.webpackChunk=self.webpackChunk||[],i=e.push.bind(e);e.push=r})(),(()=>{var t=o.x;o.x=()=>Promise.all([7955,6160,6941,6750].map(o.e,o)).then(t)})();var F=o.x()})();

//# sourceMappingURL=5952.962ed7c6b25bc3108de0.js.map